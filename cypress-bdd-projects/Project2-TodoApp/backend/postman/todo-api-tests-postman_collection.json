{
	"info": {
		"_postman_id": "ba9758cd-215a-41bd-b7fc-98675704412c",
		"name": "Todo API Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24149235"
	},
	"item": [
		{
			"name": "Login todo app",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('validate status code is 200', function(){\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"pm.test('validate message is displayed', function(){\r",
							"   const jsonData = pm.response.json();\r",
							"   pm.expect(jsonData.msg).contains('Login successful');\r",
							"})\r",
							"pm.test('validate response time is less than 200 ms', function(){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200)\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"admin\",\r\n    \"password\": \"admin123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Invalid Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('validate status code is 401', function(){\r",
							"    pm.response.to.have.status(401);\r",
							"})\r",
							"pm.test('validate message is displayed', function(){\r",
							"   const jsonData = pm.response.json();\r",
							"   pm.expect(jsonData.msg).contains('Invalid credentials');\r",
							"})\r",
							"pm.test('validate response time is less than 200 ms', function(){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200)\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"user\",\r\n    \"password\": \"admin\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add item",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('validate response status code is 201', function(){\r",
							"    pm.response.to.have.status(201);\r",
							"})\r",
							"\r",
							"pm.test('validate response time is less than 500 ms',function(){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"})\r",
							"\r",
							"pm.test('validate fields in response body', function(){\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).is.not.null;\r",
							"    pm.expect(jsonData.title).to.contain('Javascript Preparation');\r",
							"    pm.expect(jsonData.description).to.contain('Prepare JS for 1 hour');\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"Javascript Preparation\",\r\n    \"description\": \"Prepare JS for 1 hour\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/todos",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"todos"
					]
				}
			},
			"response": []
		},
		{
			"name": "Negative test -Update item",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.globals.get('itemId')"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('negative test- validate status is 404',function(){\r",
							"    pm.response.to.have.status(404);\r",
							"})\r",
							"\r",
							"pm.test('negative test- validate item not found',function(){\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.msg).to.contain('Todo not found');\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"Update JS Title\",\r\n    \"description\": \"Update JS description\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/todos/:{{todoId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"todos",
						":{{todoId}}"
					],
					"variable": [
						{
							"key": "{{todoId}}",
							"value": "12345"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Fetch item",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseData = pm.response.json();\r",
							"const itemId = responseData[0].id;\r",
							"pm.environment.set(\"todoId\", itemId);\r",
							"\r",
							"pm.test('validate response status code is 200', function(){\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"pm.test('validate response time is less than 200 ms',function(){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"})\r",
							"\r",
							"pm.test(\"Validate schema of the response\", function () {\r",
							"    responseData.forEach(function(todo) {\r",
							"        pm.expect(todo).to.be.an('object');\r",
							"        pm.expect(todo).to.have.all.keys('id', 'title','description','completed');\r",
							"        pm.expect(todo.id).to.be.a('string');\r",
							"        pm.expect(todo.completed).to.be.a('boolean');\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/todos",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"todos"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Item",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.get('todoId')"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('validate status code is 200',function(){\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"pm.test('validate response body', function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.title).to.eql(\"Update JS Title\");\r",
							"    pm.expect(responseData.description).to.eql(\"Update JS description\");\r",
							"})\r",
							"\r",
							"pm.test('validate response time is less than 200ms',function(){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"Update JS Title\",\r\n    \"description\": \"Update JS description\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/todos/{{todoId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"todos",
						"{{todoId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete item",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.get('todoId');"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"})\r",
							"pm.test('validate response time is less than 200ms',function(){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/todos/{{todoId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"todos",
						"{{todoId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Negative test-Delete item",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"validate delete invalid ID should return 404\", () => {\r",
							"  pm.response.to.have.status(404);\r",
							"});\r",
							"pm.test('validate response body message',function(){\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.msg).to.eql('Todo not found');\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/todos/12345",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"todos",
						"12345"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}